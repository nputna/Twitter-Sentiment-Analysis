{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "b3ba5d70",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "showing info https://raw.githubusercontent.com/nltk/nltk_data/gh-pages/index.xml\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import csv\n",
    "import nltk\n",
    "from nltk.corpus import stopwords\n",
    "nltk.download()\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import GaussianNB, MultinomialNB\n",
    "\n",
    "train_data = pd.read_csv(\"Train.csv\", sep=',')\n",
    "test_data = pd.read_csv(\"Test.csv\", sep=',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "72e3f6df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train length: 21802\n",
      "Test length: 6099\n"
     ]
    }
   ],
   "source": [
    "#separating instance and label for Train\n",
    "X_train_raw = [x[0] for x in train_data[['text']].values]\n",
    "Y_train = [x[0] for x in train_data[['sentiment']].values]\n",
    "\n",
    "#check the result\n",
    "print(\"Train length:\",len(X_train_raw))\n",
    "\n",
    "#separating instance and label for Test\n",
    "X_test_raw = [x[0] for x in test_data[['text']].values]\n",
    "ID_test = [x[0] for x in test_data[['id']].values]\n",
    "\n",
    "#check the result\n",
    "print(\"Test length:\",len(X_test_raw))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "a07c01d6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train feature space size (using BoW): (21802, 44045)\n",
      "Test feature space size (using BoW): (6099, 44045)\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "0",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[0;32m/var/folders/rb/gfsdt6z5243dsb3nnq00hxz00000gn/T/ipykernel_45124/1011860513.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mw\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput_dict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0moutput_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mstop_words\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m         \u001b[0moutput_dict\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0moutput_pd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mT\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mto_csv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'BoW-vocab.csv'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 0"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "\n",
    "BoW_vectorizer = CountVectorizer()\n",
    "\n",
    "#Build the feature set (vocabulary) and vectorise the Tarin dataset using BoW\n",
    "X_train_BoW = BoW_vectorizer.fit_transform(X_train_raw)\n",
    "\n",
    "#Use the feature set (vocabulary) from Train to vectorise the Test dataset \n",
    "X_test_BoW = BoW_vectorizer.transform(X_test_raw)\n",
    "\n",
    "print(\"Train feature space size (using BoW):\",X_train_BoW.shape)\n",
    "print(\"Test feature space size (using BoW):\",X_test_BoW.shape)\n",
    "\n",
    "output_dict = BoW_vectorizer.vocabulary_\n",
    "output_pd = pd.DataFrame(list(output_dict.items()),columns = ['word','count'])\n",
    "\n",
    "stop_words = set(stopwords.words('english'))\n",
    "\n",
    "for w in range(len(output_dict)):\n",
    "    if output_dict.get(w) not in stop_words:\n",
    "        output_dict.pop(w)\n",
    "\n",
    "output_pd.T.to_csv('BoW-vocab.csv',index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "8cd68938",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['negative' 'neutral' 'neutral' ... 'neutral' 'neutral' 'negative']\n"
     ]
    }
   ],
   "source": [
    "#np.random.seed(1)\n",
    "\n",
    "#class StackingClassifier():\n",
    "\n",
    "    #def __init__(self, classifiers, metaclassifier):\n",
    "        #self.classifiers = classifiers\n",
    "        #self.metaclassifier = metaclassifier\n",
    "\n",
    "    #def fit(self, X, y):\n",
    "        #for clf in self.classifiers:\n",
    "            #clf.fit(X, y)\n",
    "        #X_meta = self._predict_base(X)\n",
    "        #self.metaclassifier.fit(X_meta, y)\n",
    "    \n",
    "    #def _predict_base(self, X):\n",
    "        #yhats = []\n",
    "        #for clf in self.classifiers:\n",
    "            #yhat = clf.predict_proba(X)\n",
    "            #yhats.append(yhat)\n",
    "        #yhats = np.concatenate(yhats, axis=1)\n",
    "        #assert yhats.shape[0] == X.shape[0]\n",
    "        #return yhats\n",
    "    \n",
    "    #def predict(self, X):\n",
    "        #X_meta = self._predict_base(X)     \n",
    "        #yhat = self.metaclassifier.predict(X_meta)\n",
    "        #return yhat\n",
    "\n",
    "#classifiers = [MultinomialNB()]\n",
    "#titles = ['Multinomial NB']\n",
    "\n",
    "#meta_classifier_lr = LogisticRegression()\n",
    "#stacker_lr = StackingClassifier(classifiers, meta_classifier_lr)\n",
    "\n",
    "#for title,clf in zip(titles,classifiers):\n",
    "    clf.fit(X_train_BoW,Y_train)\n",
    "    \n",
    "#stacker_lr.fit(X_train_BoW, Y_train)\n",
    "#y_test_predict1 = model.predict(X_test_BoW)\n",
    "\n",
    "#print(y_test_predict1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "10ee3d7c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "========= MNB =========\n",
      "['negative' 'neutral' 'neutral' ... 'neutral' 'neutral' 'negative']\n"
     ]
    }
   ],
   "source": [
    "models = [MultinomialNB()]\n",
    "#models = [DecisionTreeClassifier(max_depth=3)]\n",
    "titles = ['MNB']\n",
    "\n",
    "f_out = open(\"Test-Predictions.csv\", 'w')\n",
    "\n",
    "f_writer = csv.writer(f_out, delimiter=',', quotechar='\"', quoting=csv.QUOTE_MINIMAL)\n",
    "\n",
    "f_writer.writerow(['id', 'sentiment'])\n",
    "\n",
    "for title, model in zip(titles, models):\n",
    "    print('\\n========= MNB =========')\n",
    "    \n",
    "    model.fit(X_train_BoW.todense(), Y_train)\n",
    "    y_test_predict = model.predict(X_test_BoW.todense())\n",
    "    \n",
    "print(y_test_predict)\n",
    "    \n",
    "for i in range(len(y_test_predict)):\n",
    "    f_writer.writerow([ID_test[i], y_test_predict1[i]])\n",
    "    \n",
    "f_out.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "108b0fd1",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "12733629",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5a682fa",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
